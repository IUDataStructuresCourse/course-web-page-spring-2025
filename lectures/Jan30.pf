import Nat
import List
import Jan28
import Pair

define L1 = node(1, node(2, node(3, empty)))
define L2 = [4, 5, 6]

define LoL : List<List<Nat>> = [L1,L2]
assert LoL = [[1, 2, 3], [4, 5, 6]]

function lengthy<E>(List<E>) -> Nat {
  lengthy(empty) = 0
  lengthy(node(n, next)) = 1 + lengthy(next)
}

print (if lengthy(LoL) = 2 then 42 else 0)

function search(List<Nat>, Nat) -> Nat {
   search(empty, y) = 0 // index for end of list
   search(node(x, xs), y) = 
      if x = y then 0
      else  1 + search(xs, y) 
}

assert search(L2, 5) = 1
assert search(L2, 0) = 3

define area = fun h : Nat, w : Nat { h * w }

assert area(2,3) = 6

define p : Pair<Nat,Nat> = pair(2,3)
assert first(p) = 2
assert second(p) = 3

theorem len_empty: 0 = len(Empty)
proof
  // 0 = len(Empty)
  // 0 = (function len....)(Empty)    (definition len)
  // 0 = 0
  // true
  definition len
end

theorem len_one: all x:Nat. len(Node(x, Empty)) = 1
proof
   arbitrary x:Nat
   suffices 1 + len(Empty) = 1
       by definition len
   suffices 1 + 0 = 1  by definition len
   evaluate
end
