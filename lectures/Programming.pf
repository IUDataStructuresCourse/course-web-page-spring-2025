
union Fruit {
  apple
  orange
  banana(bool) // rotten?
}

define f1 : Fruit = apple
define f2 : Fruit = banana(true)

define r4 : bool =
  switch f2 {
    case apple { false }
    case orange { false }
    case banana(r) { r }
  }
assert r4

import Nat

union NatList {
  Empty
  Node(Nat, NatList)
}

define L = Node(7, Node(4, Node(5, Empty)))

function len(NatList) -> Nat { // what is ->?, 
  len(Empty) = 0
  len(Node(x, rest)) = 1 + len(rest)
}

assert len(L) = 3

union List<ElementType> {
  empty
  node(ElementType, List<ElementType>)
}

define L1 = @empty<Nat>
define L2 = node(1, node(2, node(3, empty)))

function length<E>(List<E>) -> Nat {
  length(empty) = 0
  length(node(x, rest)) = 1 + length(rest)
}

//print(length(L1))
//print(length(L2))

define L3 = node(true, node(false, node(true, empty)))
//print(length(L3))

define area : (fn Nat,Nat, -> Nat) = fun h, w { h * w }

//print(area(3,4))

function get<E>(List<E>, Nat) -> Option<E> {
  get(empty, n) = none
  get(node(x, rest), n) =
    switch n {
      case zero {
        just(x)
      }
      case suc(n') {
        get(rest, n')
      }
    }
}

//print(get(L2, 1))

function nth<E>(List<E>, Nat, E) -> E {

  nth(empty, n, default) = default
  
  nth(node(x, rest), n, default) =
    switch n {
      case zero {
        x
      }
      case suc(n') { // n' is n - 1
        nth(rest, n', default)
      }
    }
}

//print(nth(L2, 1, 44))
//print(nth(L2, 10, 44))

function nth<E>(List<E>, E) -> fn Nat -> E {

  nth(empty, default) = λ n { default }
  
  nth(node(x, rest), default) = λ n {
    switch n {
      case zero {
        x
      }
      case suc(n') { // n' is n - 1
        nth(rest, n', default)
      }
    }
  }
}

//print(nth(L2, 44)(1))
//print(nth(L2, 44)(10))

theorem len_empty: len(Empty) = 0
proof
  definition len
end

theorem len_node: len(Node(42, Empty)) = 1
proof
  suffices 1 + 0 = 1
      with definition {len,len}
  add_zero
end