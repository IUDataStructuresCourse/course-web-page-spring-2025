import Nat
import List

union Fruit {
  apple
  orange
  banana(bool)
}

define f1 : Fruit = apple
define f2 : Fruit = banana(true)
define f3 : Fruit = banana(false)

define rotten_f3 : bool =
  switch f3 {
  case apple { false }
  case orange { false }
  case banana(r) { r }
  }

assert rotten_f3 = false

union NatList {
  Empty
  Node(Nat, NatList)
}

define L = Node(7, Node(4, Node(5, Empty)))

function len(NatList) -> Nat {
   len(Empty) = 0
   len(Node(n, ls)) = 1 + len(ls)
}

assert len(L) = 3

//union List<T> {
//  empty
//  node(T, List<T>)
//}

private define GL : List<Nat> = node(7, node(4, node(5, empty)))

private define E = @empty<Nat>

define list_456 = [4,5,6]
assert [4,5,6] = list_456 
