import Nat
import List
import Base

define isEven : fn Nat -> bool = fun n { some m:Nat. n = 2 * m }
define isOdd : fn Nat -> bool = fun n { some m:Nat. n = suc (2 * m) }

theorem addition_of_evens_example:
  all x:Nat, y:Nat.
  if isEven(x) and isEven(y) then isEven(x + y)
proof
  arbitrary x:Nat, y:Nat
  assume even_xy: isEven(x) and isEven(y)
	suffices some m:Nat. x + y = 2 * m
		by definition {isEven}
  have ex: some m:Nat. x = 2 * m by definition isEven in even_xy
  have ey: some m:Nat. y = 2 * m by definition isEven in even_xy
  obtain a where x_2a: x = 2*a from ex
  obtain b where y_2b: y = 2*b from ey
  choose (a + b)
  suffices 2 * a + 2 * b = 2 * (a + b) by rewrite x_2a | y_2b
  rewrite dist_mult_add
end



theorem exercise_demorgan: all A:bool, B:bool.
  if (not A) or (not B) then not (A and B)
proof
  arbitrary A:bool, B:bool
  assume premise: (not A) or (not B)
  cases premise
  case nA: not A {
    //rewrite (apply eq_false to nA)
    assume ab: A and B
    have: A by ab
    conclude false by apply nA to recall A
  }
  case nB: not B {
    assume ab: A and B
    conclude false by apply nB to ab
  }
end



/*
theorem add_to_zero_is_zero: all n:Nat, m:Nat.
  if n + m = 0
  then n = 0 and m = 0
proof
  arbitrary n:Nat, m:Nat
  switch n {
    case 0 {
      assume premise: 0 + m = 0
      have f1: 0 + 0 = 0 by definition operator+
      have f2: m = 0 by definition operator+ in premise
      f1, f2
    }
    case suc(n') {
      assume premise: suc(n') + m = 0
      sorry
    }
  }
  
end

theorem example: all T:type, xs:List<T>, ys:List<T>.
  if length(xs ++ ys) = 0
  then length(xs) = 0
proof
  arbitrary T:type, xs:List<T>, ys:List<T>
  assume premise: length(xs ++ ys) = 0
  have f1: length(xs) + length(ys) = 0
    by rewrite length_append<T>[xs,ys] in premise
  apply add_to_zero_is_zero[length(xs), length(ys)] to f1
end
*/

theorem intro_dichotomy:  all x:Nat, y:Nat.  x ≤ y  or  y < x
proof
  arbitrary x:Nat, y:Nat
  have tri: x < y or x = y or y < x by trichotomy[x][y]
  cases tri
  case: x < y {
    have: x ≤ y by apply less_implies_less_equal[x][y] to recall x < y
    conclude x ≤ y or y < x by recall x ≤ y
  }
  case: x = y {
    have: x ≤ y by
        suffices y ≤ y  by rewrite (recall x = y)
        less_equal_refl[y]
    conclude x ≤ y or y < x by recall x ≤ y
  }
  case: y < x {
    conclude x ≤ y or y < x by recall y < x
  }
end

theorem prove_not_example: not (0 = 1)
proof
  assume z1: 0 = 1
  conclude false by recall 0 = 1
end

theorem use_not_example: all P:bool. if P and not P then false
proof
  arbitrary P:bool
  assume premise: P and not P
  have np: not P by premise
  have p: P by premise
  conclude false by apply np to p
end


